
<!--
~~~~~~~~~~~~~~~~~~
VNX Sample scenarios
~~~~~~~~~~~~~~~~~~

Name:        openstack_tutorial-liberty_4nodes_legacy_openvswitch
Description: This is an Openstack tutorial scenario designed to experiment with Openstack free and open-source 
             software platform for cloud-computing. The scenario is made of four virtual machines: a controller 
             based on LXC and a network node and two compute nodes based on KVM. Optionally, a third compute 
             node can be added once the scenario is started.
             Openstack version used: Liberty.
             The network configuration is the one named "Legacy with Open vSwitch" described here:
                  http://docs.openstack.org/networking-guide/scenario_legacy_ovs.html


Author:      David Fernandez (david@dit.upm.es)

This file is part of the Virtual Networks over LinuX (VNX) Project distribution. 
(www: http://www.dit.upm.es/vnx - e-mail: vnx@dit.upm.es) 

Departamento de Ingenieria de Sistemas Telematicos (DIT)
Universidad Politecnica de Madrid
SPAIN
-->

<vnx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="/usr/share/xml/vnx/vnx-2.00.xsd">
  <global>
    <version>2.0</version>
    <scenario_name>openstack_tutorial-liberty_4nodes_legacy_openvswitch</scenario_name>
    <ssh_key>/root/.ssh/id_dsa.pub</ssh_key>
    <automac/>
    <!--vm_mgmt type="none" /-->
    <vm_mgmt type="private" network="10.250.0.0" mask="24" offset="12">
       <host_mapping />
    </vm_mgmt> 
    <vm_defaults>
        <console id="0" display="no"/>
        <console id="1" display="yes"/>
    </vm_defaults>
    <cmd-seq seq="start-all">step1,step2,step3,step4,step5,step6,step7,step8,step9,step10</cmd-seq>
  </global>

  <net name="MgmtNet" mode="virtual_bridge" />
  <net name="TunnNet" mode="virtual_bridge" />
  <net name="ExtNet"  mode="openvswitch" />
  <net name="VlanNet"  mode="virtual_bridge" />
  <net name="virbr0"  mode="virtual_bridge" managed="no"/>

  <vm name="controller" type="lxc" arch="x86_64">
    <filesystem type="cow">filesystems/rootfs_lxc_ubuntu64-ostack-controller</filesystem>
    <console id="0" display="yes"/>
    <if id="1" net="MgmtNet">
      <ipv4>10.0.0.11/24</ipv4>
    </if>
    <if id="2" net="ExtNet">
      <ipv4>10.0.10.11/24</ipv4>
    </if>
    <if id="9" net="virbr0">
      <ipv4>dhcp</ipv4>
    </if>

    <!-- Copy /etc/hosts file -->
    <filetree seq="on_boot" root="/root/">conf/hosts</filetree>
    <exec seq="on_boot" type="verbatim">
        cat /root/hosts >> /etc/hosts;
        rm /root/hosts;
    </exec>

    <!-- Copy ntp config and restart service -->
    <filetree seq="on_boot" root="/etc/chrony/chrony.conf">conf/ntp/chrony-controller.conf</filetree>
    <exec seq="on_boot" type="verbatim">
        service chrony restart
    </exec>

    <filetree seq="on_boot" root="/root/">conf/controller/bin</filetree>
    <exec seq="on_boot" type="verbatim">
        chmod +x /root/bin/*
    </exec>

    <!-- STEP 1: Basic services -->
    <filetree seq="step1" root="/etc/mysql/conf.d/">conf/controller/mysql/mysqld_openstack.cnf</filetree>
    <filetree seq="step1" root="/etc/mysql/conf.d/">conf/controller/mongodb/mongodb.conf</filetree>
    <exec seq="step1" type="verbatim">
        service mysql restart
        service mongodb stop
        rm /var/lib/mongodb/journal/prealloc.*
        service mongodb start
        rabbitmqctl add_user openstack xxxx
        rabbitmqctl set_permissions openstack ".*" ".*" ".*" 
    </exec>

    <!-- STEP 2: Identity service -->
    <filetree seq="step2" root="/etc/keystone/">conf/controller/keystone/keystone.conf</filetree>
    <filetree seq="step2" root="/etc/apache2/sites-available/">conf/controller/apache2/wsgi-keystone.conf</filetree>
    <filetree seq="step2" root="/root/bin/">conf/controller/keystone/admin-openrc.sh</filetree>
    <filetree seq="step2" root="/root/bin/">conf/controller/keystone/demo-openrc.sh</filetree>
    <exec seq="step2" type="verbatim">
        mysql -u root --password='xxxx' -e "CREATE DATABASE keystone;"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'xxxx';"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'xxxx';"
        su -s /bin/sh -c "keystone-manage db_sync" keystone

        echo "ServerName controller" >> /etc/apache2/apache2.conf
        ln -s /etc/apache2/sites-available/wsgi-keystone.conf /etc/apache2/sites-enabled
        service apache2 restart
        rm -f /var/lib/keystone/keystone.db

        export OS_TOKEN=ee173fc22384618b472e
        export OS_URL=http://controller:35357/v3
        export OS_IDENTITY_API_VERSION=3
        # Create endpoints
        openstack service create --name keystone --description "OpenStack Identity" identity
        openstack endpoint create --region RegionOne identity public http://controller:5000/v2.0
        openstack endpoint create --region RegionOne identity internal http://controller:5000/v2.0
        openstack endpoint create --region RegionOne identity admin http://controller:35357/v2.0
        # Create users and projects
        openstack project create --domain default --description "Admin Project" admin
        openstack user create --domain default --password=xxxx admin
        openstack role create admin
        openstack role add --project admin --user admin admin
        openstack project create --domain default --description "Service Project" service
        openstack project create --domain default --description "Demo Project" demo
        openstack user create --domain default --password=xxxx demo
        openstack role create user
        openstack role add --project demo --user demo user
    </exec>

    <!-- STEP 3: Image service (Glance) -->
    <filetree seq="step3" root="/etc/glance/">conf/controller/glance/glance-api.conf</filetree>
    <filetree seq="step3" root="/etc/glance/">conf/controller/glance/glance-registry.conf</filetree>
    <exec seq="step3" type="verbatim">
        mysql -u root --password='xxxx' -e "CREATE DATABASE glance;"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'xxxx';"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY 'xxxx';"
        source /root/bin/admin-openrc.sh
        openstack user create --domain default --password=xxxx glance
        openstack role add --project service --user glance admin
        openstack service create --name glance --description "OpenStack Image service" image
        openstack endpoint create --region RegionOne image public http://controller:9292
        openstack endpoint create --region RegionOne image internal http://controller:9292
        openstack endpoint create --region RegionOne image admin http://controller:9292

        su -s /bin/sh -c "glance-manage db_sync" glance
        service glance-registry restart
        service glance-api restart
        rm -f /var/lib/glance/glance.sqlite
    </exec>

    <!-- STEP 4: Compute service (Nova) -->
    <filetree seq="step4" root="/etc/nova/">conf/controller/nova/nova.conf</filetree>
    <exec seq="step4" type="verbatim">
        mysql -u root --password='xxxx' -e "CREATE DATABASE nova;"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY 'xxxx';"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' IDENTIFIED BY 'xxxx';"
        source /root/bin/admin-openrc.sh

        openstack user create --domain default --password=xxxx nova
        openstack role add --project service --user nova admin
        openstack service create --name nova --description "OpenStack Compute" compute

        openstack endpoint create --region RegionOne compute public http://controller:8774/v2/%\(tenant_id\)s
        openstack endpoint create --region RegionOne compute internal http://controller:8774/v2/%\(tenant_id\)s
        openstack endpoint create --region RegionOne compute admin http://controller:8774/v2/%\(tenant_id\)s

        su -s /bin/sh -c "nova-manage db sync" nova
        service nova-api restart
        service nova-cert restart
        service nova-consoleauth restart
        service nova-scheduler restart
        service nova-conductor restart
        service nova-novncproxy restart
        rm -f /var/lib/nova/nova.sqlite
    </exec>

    <!-- STEP 5: Network service (Neutron) -->
    <filetree seq="step5" root="/etc/neutron/">conf/controller/neutron/neutron.conf</filetree>
    <filetree seq="step5" root="/etc/neutron/plugins/ml2/">conf/controller/neutron/ml2_conf.ini</filetree>
    <exec seq="step5" type="verbatim">
        mysql -u root --password='xxxx' -e "CREATE DATABASE neutron;"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY 'xxxx';"
        mysql -u root --password='xxxx' -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY 'xxxx';"
        source /root/bin/admin-openrc.sh
        openstack user create --domain default --password=xxxx neutron
        openstack role add --project service --user neutron admin
        openstack service create --name neutron --description "OpenStack Networking" network
        openstack endpoint create --region RegionOne network public http://controller:9696
        openstack endpoint create --region RegionOne network internal http://controller:9696
        openstack endpoint create --region RegionOne network admin http://controller:9696
        su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
        service nova-api restart
        service neutron-server restart
    </exec>

    <!-- STEP 6: Dashboard service -->
    <filetree seq="step6" root="/etc/openstack-dashboard/">conf/controller/dashboard/local_settings.py</filetree>
    <exec seq="step6" type="verbatim">
        service apache2 reload
    </exec>

    <exec seq="load-img" type="verbatim">
        source /root/bin/admin-openrc.sh
        
        # Cirros image  
        #wget -P /tmp/images http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
        wget -P /tmp/images http://138.4.7.228/download/vnx/filesystems/ostack-images/cirros-0.3.4-x86_64-disk-vnx.img
        glance image-create --name "cirros-0.3.4-x86_64-vnx" --file /tmp/images/cirros-0.3.4-x86_64-disk-vnx.img --disk-format qcow2 --container-format bare --visibility public --progress
        rm /tmp/images/cirros-0.3.4-x86_64-disk*.img
        
        # Ubuntu image solowan - root - xxxx
        wget -P /tmp/images http://idefix.dit.upm.es/download/vnx/filesystems/ostack-images/trusty-server-cloudimg-amd64-disk1-solowan.qcow2
        glance image-create --name "trusty-server-cloudimg-amd64-solowan" --file /tmp/images/trusty-server-cloudimg-amd64-disk1-solowan.qcow2 --disk-format qcow2 --container-format bare --visibility public --progress
        rm /tmp/images/trusty-server-cloudimg-amd64-disk1*.qcow2


    </exec>

    <exec seq="create-demo-scenario" type="verbatim">
        source /root/bin/admin-openrc.sh

        # Create internal network
        neutron net-create net0
        neutron subnet-create net0 10.1.1.0/24 --name subnet0 --gateway 10.1.1.1 --dns-nameserver 8.8.8.8

        # Create virtual machine
        mkdir tmp
        openstack keypair create vm1 > tmp/vm1
        openstack server create --flavor m1.tiny --image cirros-0.3.4-x86_64-vnx vm1 --nic net-id=net0

        # Create external network
        #neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron subnet-create --name ExtSubnet --allocation-pool start=10.0.10.100,end=10.0.10.200 --dns-nameserver 10.0.10.1 --gateway 10.0.10.1 ExtNet 10.0.10.0/24
        neutron router-create r0
        neutron router-gateway-set r0 ExtNet
        neutron router-interface-add r0 subnet0

        # Assign floating IP address to vm
        openstack ip floating add $( openstack ip floating create ExtNet -c ip -f value ) vm1

        # Create security group rules to allow ICMP, SSH and WWW access
        openstack security group rule create --proto icmp --dst-port 0  default
        openstack security group rule create --proto tcp  --dst-port 80 default
        openstack security group rule create --proto tcp  --dst-port 22 default

    </exec>

    <exec seq="create-scenario-lbaas" type="verbatim">
        source /root/bin/admin-openrc.sh
	nova flavor-create machines auto 1024 6 1

        # Create internal network0
        neutron net-create net0
        neutron subnet-create net0 10.1.1.0/24 --name subnet0 --gateway 10.1.1.1 --dns-nameserver 8.8.8.8

 	# Create internal network1
        neutron net-create net1
        neutron subnet-create net1 10.1.2.0/24 --name subnet1 --gateway 10.1.2.1 --dns-nameserver 8.8.8.8

        # Create virtual machines and Assign floating IP address to vm
        mkdir tmp
        openstack keypair create ubuntu > /tmp/ubuntu
	chmod 600 /tmp/ubuntu


	#Net0
        openstack server create --flavor machines --image trusty-server-cloudimg-amd64-solowan --nic net-id=net0,ip_address=10.1.1.3  --key-name ubuntu ubuntu_$((++server))
        openstack ip floating add $( openstack ip floating create ExtNet -c ip -f value ) ubuntu_$server


        openstack server create --flavor machines --image trusty-server-cloudimg-amd64-solowan --nic net-id=net0,ip_address=10.1.1.4 --key-name ubuntu ubuntu_$((++server))
        openstack ip floating add $( openstack ip floating create ExtNet -c ip -f value ) ubuntu_$server

	#Net1
        openstack server create --flavor machines --image trusty-server-cloudimg-amd64-solowan --nic net-id=net1 --key-name ubuntu ubuntu_$((++server))
        openstack ip floating add $( openstack ip floating create ExtNet -c ip -f value ) ubuntu_$server


	# SSH Access: ssh -i /tmp/ubuntu ubuntu@ip
        # Create external network
        #neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron subnet-create --name ExtSubnet --allocation-pool start=10.0.10.100,end=10.0.10.200 --dns-nameserver 10.0.10.1 --gateway 10.0.10.1 ExtNet 10.0.10.0/24
        neutron router-create r0
        neutron router-gateway-set r0 ExtNet
        neutron router-interface-add r0 subnet0
        neutron router-interface-add r0 subnet1

        # Create security group rules to allow ICMP, SSH and WWW access
        openstack security group rule create --proto icmp --dst-port 0  default
        openstack security group rule create --proto tcp  --dst-port 80 default
        openstack security group rule create --proto tcp  --dst-port 22 default


	#Configure LBaaS
	neutron lb-pool-create --lb-method ROUND_ROBIN --name pool --protocol TCP --subnet-id subnet0
	neutron lb-member-create --address 10.1.1.3 --protocol-port 80 pool
	neutron lb-member-create --address 10.1.1.4 --protocol-port 80 pool
	neutron lb-vip-create --name vip --protocol-port 80 --protocol TCP --subnet-id subnet0 pool
	neutron lb-healthmonitor-create --type PING --delay 5 --max-retries 3 --timeout 5
	#neutron lb-healthmonitor-associate b782cb2d-7ff5-4214-914c-f3bf7af4a5cb pool

	
    </exec>
<!--RAM NETWORK 8G, RAM COMPUTE1 3G-->
	<exec seq="create-scenario-oaas" type="verbatim">
	source /root/bin/admin-openrc.sh
	nova flavor-create machines auto 1024 30 3
	nova flavor-create machines2 auto 1024 14 1
	<!--nova flavor-create machines3 auto 6144 30 3-->
	<!--nova flavor-create machines4 auto 4096 30 3-->
	

        # Create internal lanA
        neutron net-create lanA
        neutron subnet-create lanA 192.168.0.0/24 --name sublanA  --dns-nameserver 138.100.198.143

	# Create external network
        #neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron subnet-create --name ExtSubnet --allocation-pool start=10.0.10.100,end=10.0.10.200 --dns-nameserver 10.0.10.1 --gateway 10.0.10.1 ExtNet 10.0.10.0/24
        neutron router-create r0
	neutron router-gateway-set --enable-snat r0 ExtNet
	neutron router-update r0 --routes type=dict list=true destination=192.168.1.0/24,nexthop=10.0.10.151
        neutron router-interface-add r0 sublanA

        # Create virtual machines and Assign floating IP address to vm
        mkdir tmp
        openstack keypair create ubuntu > /tmp/ubuntu
	chmod 600 /tmp/ubuntu
	# SSH Access: ssh -i /tmp/ubuntu ubuntu@ip

	#Hosts
        openstack server create --flavor machines2 --image trusty-server-cloudimg-amd64-solowan --nic net-id=lanA --key-name ubuntu --user-data /root/instancias/hServer.sh h$((++server))
        openstack ip floating add $( openstack ip floating create ExtNet -c ip -f value ) h$server

        # Create security group rules to allow ICMP, SSH and WWW access
        openstack security group rule create --proto icmp --dst-port 0  default
        openstack security group rule create --proto tcp  --dst-port 80 default
        openstack security group rule create --proto tcp  --dst-port 22 default
	</exec>


<filetree seq="step7" root="/root/instancias/">scripts/optimizador_extremo.sh</filetree>
<filetree seq="step7" root="/root/instancias/">scripts/hServer.sh</filetree>
<filetree seq="step7" root="/root">scripts/oaasController.sh</filetree>

<!--RAM NETWORK 3G, RAM COMPUTE1 8G-->
<exec seq="create-scenario-solowan-simplified" type="verbatim">
	source /root/bin/admin-openrc.sh
	nova flavor-create machines auto 2048 10 1
	nova flavor-create machines2 auto 4096 20 2

        # Create internal network
        neutron net-create net0
        neutron subnet-create net0 10.1.1.0/24 --name subnet0 --gateway 10.1.1.1 --dns-nameserver 138.100.198.143

        # Create virtual machine
        mkdir tmp
        openstack keypair create ubuntu > /tmp/ubuntu
	chmod 600 /tmp/ubuntu
	# SSH Access: ssh -i /tmp/ubuntu ubuntu@ip

	openstack server create --flavor machines --image trusty-server-cloudimg-amd64-solowan  --nic net-id=net0  --key-name ubuntu --user-data /root/instancias/optimizador_extremo.sh  h$((++server))
	openstack server create --flavor machines --image trusty-server-cloudimg-amd64-solowan --nic net-id=net0  --key-name ubuntu --user-data /root/instancias/optimizador_extremo.sh  h$((++server))

        # Create external network
        #neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron net-create ExtNet --provider:physical_network external --provider:network_type flat --router:external --shared
        neutron subnet-create --name ExtSubnet --allocation-pool start=10.0.10.100,end=10.0.10.200 --dns-nameserver 10.0.10.1 --gateway 10.0.10.1 ExtNet 10.0.10.0/24
        neutron router-create r0
        neutron router-gateway-set r0 ExtNet
        neutron router-interface-add r0 subnet0

        # Assign floating IP address to vm
        openstack ip floating add $( openstack ip floating create ExtNet -c ip -f value ) h0
        openstack ip floating add $( openstack ip floating create ExtNet -c ip -f value ) h1

        # Create security group rules to allow ICMP, SSH and WWW access
        openstack security group rule create --proto icmp --dst-port 0  default
        openstack security group rule create --proto tcp  --dst-port 80 default
        openstack security group rule create --proto tcp  --dst-port 22 default

    </exec>



    <!-- STEP 7: LoadBalancer service (LBaaS) and Firewall as a service (FwaaS) -->
    <exec seq="step7" type="verbatim">
	<!-- add plugin -->
	sed  -i  '/^service_plugins/cservice_plugins = router,lbaas' /etc/neutron/neutron.conf
	<!-- install python dependencies -->
	apt-get -y update
        apt-get -y install python-pyasn1-modules python-neutron-lbaas
	<!-- restart neutron -->
        service neutron-server restart
	<!-- restart apache2 -->
	service apache2 restart
    </exec>

    <!-- STEP 10: Optimizer as a Service (OaaS) -->
    <exec seq="step10" type="verbatim">

	<!-- clone controller project -->
	apt-get -y update
	apt-get -y install git
	git clone https://github.com/solowan/OaaS /tmp/OaaS
	chmod +x /root/oaasController.sh

	<!-- restart neutron-->
        service neutron-server restart
	service apache2 restart

    </exec>


    <exec seq="create-demo-vm2" type="verbatim">
        source /root/bin/admin-openrc.sh
        # Create virtual machine
        mkdir tmp
        openstack keypair create vm2 > tmp/vm2
        openstack server create --flavor m1.tiny --image cirros-0.3.4-x86_64-vnx vm2 --nic net-id=net0
    </exec>
  </vm>

  <vm name="network" type="libvirt" subtype="kvm" os="linux" exec_mode="sdisk" arch="x86_64">
    <filesystem type="cow">filesystems/rootfs_kvm_ubuntu64-ostack-network</filesystem>
    <mem>8G</mem>
    <if id="1" net="MgmtNet">
      <ipv4>10.0.0.21/24</ipv4>
    </if>
    <if id="2" net="TunnNet">
      <ipv4>10.0.1.21/24</ipv4>
    </if>
    <if id="3" net="VlanNet">
    </if>
    <if id="4" net="ExtNet">
    </if>
    <if id="9" net="virbr0">
      <ipv4>dhcp</ipv4>
    </if>
    <forwarding type="ip" />
    <forwarding type="ipv6" />

   <!-- Copy /etc/hosts file -->
    <filetree seq="on_boot" root="/root/">conf/hosts</filetree>
    <exec seq="on_boot" type="verbatim">
        cat /root/hosts >> /etc/hosts;
        rm /root/hosts;
    </exec>

    <!-- Copy ntp config and restart service -->
    <filetree seq="on_boot" root="/etc/chrony/chrony.conf">conf/ntp/chrony-others.conf</filetree>
    <exec seq="on_boot" type="verbatim">
        service chrony restart
    </exec>

    <filetree seq="on_boot" root="/root/">conf/network/bin</filetree>
    <exec seq="on_boot" type="verbatim">
        chmod +x /root/bin/*
    </exec>

    <!-- STEP 5: Network service (Neutron with Option 2: Self-service networks) -->
    <filetree seq="step5" root="/etc/neutron/">conf/network/neutron/neutron.conf</filetree>
    <filetree seq="step5" root="/etc/neutron/plugins/ml2/">conf/network/neutron/ml2_conf.ini</filetree>
    <filetree seq="step5" root="/etc/neutron/">conf/network/neutron/l3_agent.ini</filetree>
    <filetree seq="step5" root="/etc/neutron/">conf/network/neutron/dhcp_agent.ini</filetree>
    <filetree seq="step5" root="/etc/neutron/">conf/network/neutron/dnsmasq-neutron.conf</filetree>
    <filetree seq="step5" root="/etc/neutron/">conf/network/neutron/metadata_agent.ini</filetree>
    <exec seq="step5" type="verbatim">
        ovs-vsctl add-br br-vlan
        ovs-vsctl add-port br-vlan eth3
        ovs-vsctl add-br br-ex
        ovs-vsctl add-port br-ex eth4
        service openvswitch-switch restart
        service neutron-plugin-openvswitch-agent restart
        service neutron-l3-agent restart
        service neutron-dhcp-agent restart
        service neutron-metadata-agent restart
        rm -f /var/lib/neutron/neutron.sqlite
    </exec>

    <!-- STEP 7: LoadBalancer service (LBaaS) and Firewall as a service(FwaaS) -->
    <exec seq="step7" type="verbatim">
	<!-- install agent -->
	apt-get -y update
	apt-get -y install neutron-lbaas-agent
	<!-- service_plugins  -->
	sed  -i  '/^service_plugins/cservice_plugins = router,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,neutron.services.firewall.fwaas_plugin.FirewallPlugin' /etc/neutron/neutron.conf
	sed -i '$a [service_providers]' /etc/neutron/neutron.conf
	sed -i '$a service_provider=FIREWALL:Iptables:neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver' /etc/neutron/neutron.conf 
sed -i '$a service_provider=LOADBALANCER:Haproxy:neutron.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default' /etc/neutron/neutron.conf

	<!-- agent changes -->
	sed -i "/^# interface_driver = neutron.agent.linux.interface.OVS/ cinterface_driver = neutron.agent.linux.interface.OVSInterfaceDriver" /etc/neutron/lbaas_agent.ini
	sed  -i "/^# device_driver = neutron/cdevice_driver = neutron.services.loadbalancer.drivers.haproxy.namespace_driver.HaproxyNSDriver" /etc/neutron/lbaas_agent.ini
	sed -i "/^# user/ cuser_group = nogroup"  /etc/neutron/lbaas_agent.ini

	sed  -i "/^#driver/cdriver = neutron.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver" /etc/neutron/fwaas_driver.ini
	sed -i "/^#enabled/ cenabled = True"  /etc/neutron/fwaas_driver.ini
	
	<!-- database update -->
	neutron-db-manage --service lbaas upgrade head
	<!-- restart lbaas agent -->
        service neutron-lbaas-agent restart
        service neutron-l3-agent restart
    </exec>
 <!-- STEP 8: metadata -->
    <exec seq="step8" type="verbatim">
	sed -i "/^# enable_i/ cenable_isolated_metadata = True"  /etc/neutron/dhcp_agent.ini
	service neutron-dhcp-agent restart
    </exec>


 <!-- STEP 9: Optimizer -->
    <exec seq="step9" type="verbatim">
	apt-get -y update
	apt-get -y install git apache2 make
	mkdir /etc/opennop

	git clone https://github.com/solowan/solowan.git
	cd solowan/opennop/opennop-daemon

	cp scripts/solowan_* /root/bin
	chmod +x /root/bin/solowan_*
	etc/install.sh

	apt-get -y install autoconf autogen build-essential iptables libnetfilter-queue-dev libreadline-dev psmisc liblog4c-dev
	./autogen.sh
	./configure
	make
	make install
	sed  -i  '/^num_pkt_cache_size/cnum_pkt_cache_size 16384' /etc/opennop/opennop.conf

	
    </exec>
<filetree seq="step7" root="/root">scripts/oaasNetwork.sh</filetree>
    <!-- STEP 10: Optimizer as a Service (OaaS) -->
    <exec seq="step10" type="verbatim">
	<!-- clone network project -->
	apt-get -y update
	apt-get -y install git
	git clone https://github.com/solowan/OaaS /tmp/OaaS
	chmod +x /root/oaasNetwork.sh
	<!-- restart neutron -->
        service neutron-l3-agent restart

    </exec>


 <!-- Create iptables rules for optimizer -->
    <exec seq="create-iptables" type="verbatim">

	ROUTER_NS=$(ip netns | grep router)
	ip netns exec $ROUTER_NS iptables -A FORWARD -j NFQUEUE --queue-num 0 --queue-bypass -p TCP --sport 80
	ip netns exec $ROUTER_NS iptables -A FORWARD -j NFQUEUE --queue-num 0 --queue-bypass -p TCP --dport 80
	ip netns exec $ROUTER_NS iptables -A FORWARD -j NFQUEUE --queue-num 0 --queue-bypass -p TCP --sport 21
	ip netns exec $ROUTER_NS iptables -A FORWARD -j NFQUEUE --queue-num 0 --queue-bypass -p TCP --dport 21
	ip netns exec $ROUTER_NS iptables -A FORWARD -j NFQUEUE --queue-num 0 --queue-bypass -p TCP --sport 8000:8999
	ip netns exec $ROUTER_NS iptables -A FORWARD -j NFQUEUE --queue-num 0 --queue-bypass -p TCP --dport 8000:8999
	
    </exec>

  </vm>


  <vm name="compute1" type="libvirt" subtype="kvm" os="linux" exec_mode="sdisk" arch="x86_64" vcpu="3">
    <filesystem type="cow">filesystems/rootfs_kvm_ubuntu64-ostack-compute</filesystem>
    <mem>3G</mem>
    <if id="1" net="MgmtNet">
      <ipv4>10.0.0.31/24</ipv4>
    </if>
    <if id="2" net="TunnNet">
      <ipv4>10.0.1.31/24</ipv4>
    </if>
    <if id="3" net="VlanNet">
    </if>
    <if id="9" net="virbr0">
      <ipv4>dhcp</ipv4>
    </if>

    <!-- Copy /etc/hosts file -->
    <filetree seq="on_boot" root="/root/">conf/hosts</filetree>
    <exec seq="on_boot" type="verbatim">
        cat /root/hosts >> /etc/hosts;
        rm /root/hosts;
    </exec>

    <!-- Copy ntp config and restart service -->
    <filetree seq="on_boot" root="/etc/chrony/chrony.conf">conf/ntp/chrony-others.conf</filetree>
    <exec seq="on_boot" type="verbatim">
        service chrony restart
    </exec>

    <!-- STEP 4: Compute service (Nova) -->
    <filetree seq="step4" root="/etc/nova/">conf/compute1/nova/nova.conf</filetree>
    <filetree seq="step4" root="/etc/nova/">conf/compute1/nova/nova-compute.conf</filetree>
    <exec seq="step4" type="verbatim">
        service nova-compute restart
        rm -f /var/lib/nova/nova.sqlite
    </exec>

    <!-- STEP 5: Network service (Neutron) -->
    <filetree seq="step5" root="/etc/neutron/">conf/compute1/neutron/neutron.conf</filetree>
    <filetree seq="step5" root="/etc/neutron/plugins/ml2/">conf/compute1/neutron/ml2_conf.ini</filetree>
    <exec seq="step5" type="verbatim">
        ovs-vsctl add-br br-vlan
        ovs-vsctl add-port br-vlan eth3
        service openvswitch-switch restart
        service nova-compute restart
        service neutron-plugin-openvswitch-agent restart
    </exec>

  </vm>



  <vm name="compute2" type="libvirt" subtype="kvm" os="linux" exec_mode="sdisk" arch="x86_64" vcpu="3">
    <filesystem type="cow">filesystems/rootfs_kvm_ubuntu64-ostack-compute</filesystem>
    <mem>512M</mem>
    <if id="1" net="MgmtNet">
      <ipv4>10.0.0.32/24</ipv4>
    </if>
    <if id="2" net="TunnNet">
      <ipv4>10.0.1.32/24</ipv4>
    </if>
    <if id="3" net="VlanNet">
    </if>
    <if id="9" net="virbr0">
      <ipv4>dhcp</ipv4>
    </if>

    <!-- Copy /etc/hosts file -->
    <filetree seq="on_boot" root="/root/">conf/hosts</filetree>
    <exec seq="on_boot" type="verbatim">
        cat /root/hosts >> /etc/hosts;
        rm /root/hosts;
    </exec>

    <!-- Copy ntp config and restart service -->
    <filetree seq="on_boot" root="/etc/chrony/chrony.conf">conf/ntp/chrony-others.conf</filetree>
    <exec seq="on_boot" type="verbatim">
        service chrony restart
    </exec>

    <!-- STEP 4: Compute service (Nova) -->
    <filetree seq="step4" root="/etc/nova/">conf/compute2/nova/nova.conf</filetree>
    <filetree seq="step4" root="/etc/nova/">conf/compute2/nova/nova-compute.conf</filetree>
    <exec seq="step4" type="verbatim">
        service nova-compute restart
        rm -f /var/lib/nova/nova.sqlite
    </exec>

    <!-- STEP 5: Network service (Neutron with Option 2: Self-service networks) -->
    <filetree seq="step5" root="/etc/neutron/">conf/compute2/neutron/neutron.conf</filetree>
    <filetree seq="step5" root="/etc/neutron/plugins/ml2/">conf/compute2/neutron/ml2_conf.ini</filetree>
    <exec seq="step5" type="verbatim">
        ovs-vsctl add-br br-vlan
        ovs-vsctl add-port br-vlan eth3
        service openvswitch-switch restart
        service nova-compute restart
        service neutron-plugin-openvswitch-agent restart
    </exec>

  </vm>


  <host>
    <hostif net="ExtNet">
       <ipv4>10.0.10.1/24</ipv4>
    </hostif>
    <hostif net="MgmtNet">
      <ipv4>10.0.0.1/24</ipv4>
    </hostif>
  </host>

</vnx>
